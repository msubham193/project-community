datasource db {
    provider          = "mongodb"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialActions"]
    binaryTargets   = ["native", "darwin"]
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String      @id @default(auto()) @map("_id") @db.ObjectId
    name             String?
    email            String?     @unique
    emailVerified    DateTime?
    createdCommunity Community[] @relation("CreatedBy")
    follwing         Follower[]
    votes            Vote[]

    username String? @unique

    image       String?
    accounts    Account[]
    sessions    Session[]
    Post        Post[]
    Comment     Comment[]
    CommentVote CommentVote[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Community {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    posts     Post[]

    Creator   User?      @relation("CreatedBy", fields: [creatorId], references: [id])
    creatorId String?
    follower  Follower[]
}

model Follower {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    user        User      @relation(fields: [userId], references: [id])
    userId      String
    community   Community @relation(fields: [communityId], references: [id])
    communityId String
}

model Post {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    content     Json?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    authorId    String
    community   String
    communityId String
    comments    Comment[]
    votes       Vote[]
    Community   Community @relation(fields: [communityId], references: [id])
    User        User?     @relation(fields: [userId], references: [id])
    userId      String?   @db.ObjectId
}

model Comment {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    text      String
    createdAt DateTime @default(now())
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String

    replyToId String?
    replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    replies   Comment[] @relation("ReplyTo")

    votes     CommentVote[]
    commentId String?
}

model Vote {
    id     String   @id @default(auto()) @map("_id") @db.ObjectId
    user   User     @relation(fields: [userId], references: [id])
    userId String
    post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId String
    type   VoteType

    // @@id([userId, postId])
}

model CommentVote {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId String
    type      VoteType

    // @@id([userId, commentId])
}

enum VoteType {
    UP
    DOWN
}
